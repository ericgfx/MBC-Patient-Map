%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.2 (Build 17C88) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 82 82
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 82 82
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: SOQMTR+HelveticaNeue-Bold
%!FontType1-1.0: SOQMTR+HelveticaNeue-Bold 1.0000.1.0000
14 dict begin/FontName /SOQMTR+HelveticaNeue-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /two put
dup 34 /space put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -1018 1 index div -481 2 index div 1437 3 index div 1141 5 -1 roll div]cvx def
/sfnts [<


001A0012000C0000001C2B00BA00140004001B2BB8000D20457D691844B8000A2B00BA00010002000C2B01BA00030002000C2B01BE00030028002000190012000B00122BBE00040024001D00170011000A00122B00BE00010033002A00210017000E00122BBE0002002A0022001B0013000C00122B00BA0005000400112BB8000020457D691844B800002B00
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/space 1 def
/two 2 def
/uni2B90 3 def
/uni2B91 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-1018 -481 1437 1141}def
/UniqueID 4174458 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C959DCA2B25064CB2EE653C8C5E0D08068DD956094993D87692D1893E7882B3267FBEDEB6776297FEA99C681B11228C21FCD8CEF48BA467B0450225729846B0141D233872E403C84738E77CFF37E11B14F18681DAD753553A4F7F8FD5F8647B18B455B5387FDDF08F0D1FA973CD58DC08639F663DD92488551704E338E9B54CA0EEDEC26AB9BF0591B525DE7BBB6396ED9AA451885A1006D88BBF04E25E06FC10E21B38DC6D8512159FD50A12C663DFAD545516FE60250578F25870AD9940A519DAC5BF7A48682D915A0A482F20CA3A5AB93660D7AFC0BCD86411CC75B84D9438FF4456F827DA1796B91CC7321B2541C442A9253F94DB37588B876A08126E699320833E75DC117704C5F09086BB2D3A34E0CCA3B692BC60EEE4E82EC2532991FF59BDC4322B6C933424F126DFF19EA674D4EBD8F6865CFF90DEDB0C10BA43AE207313F17B7BD596930B899B5E5CB58DF644A4B1BECF01C337E7576D74C7D1BF099E821E5DDFBC56B9A50197504144E6ECF7EDEC1D5B7F98A7FBC19D41E5C3F59DD9869ADF1D0ED044987348B5320231851540EE72A044C2A9FA0A2D1A66255299D55769E491729D2541BC7DDC7D59239B9137B41D7A264DAA6E6879E8911808DEA5F633A9BCF383477668A021051F2BFA3D90BA3C375C663BFA553B35806F0B65B6AF3900EAC0E7077D33A81F7D9DF642E671F27EEC0915F6795029C68DE94E89C13DFC79083418C92A5FCCD83BA51EE80357D148914B9877A8A6495EDAAC89BE00
CA362D04BCABDF44B7C51BB777FA1A5C0F4D7D0B8605EA159721FD5554484B8A9913303D9E25D88CF4F4596D70E55C3A323F9FF6C23BB2662900140C321B6ADCAACF568CFFA45D321A5355DEE796C4A3A2B4395DB7BD159F6B23EA465B534C1B54E33F33DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/SOQMTR+HelveticaNeue-Bold cguidfix
/F1.1/SOQMTR+HelveticaNeue-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.84210527 w
0.60000002 i
/Cs1 SC
0 0.64313728 0.63529414 sc
q
0 0 82 82 rc
1 0 0 -1 1 81 cm
40 80 m
62.091389 80 80 62.091389 80 40 c
80 17.908609 62.091389 0 40 0 c
17.908609 0 0 17.908609 0 40 c
0 62.091389 17.908609 80 40 80 c
h
S
34 0 0 34 22 14 cm
BI
/Width 102
/Height 102
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource cg_aiproc
ID
^]+o(o($5$\gjJL&t,+RXf[u>dXhE5s8DrrNR#d4XK)r#QnG52BYM1Dp%@YNci:l^)R\J[&"&[cP*#j0
OTUc/"-ScKP*&5;Y5/%oM>nLcqYE4PW<8<G"-ScKP*#j0OTUc/'q1Q/k2u+3ci:ua*U<@l(RpiqP*#j0
OTUc/"-ScKP*#j0OTUc/HH*p\ruG^b]`XF["-ScKP*#j0OTUc/"-ScKP*$r]TC_pUnc-r8`W%'9bKC!N
OTUc/"-ScKP*#j0OTUc/"-ScKP*$'9Pkt@WO8g?hp\+cQOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OdjkL
nc-r8`W%&\[^?4#OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Oj31UO8g?5iSam%OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0O_DJBnc-r8`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*ZtO8g>ne^O\aOTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0O\E'cnc-r8`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*Zt
O8g>ne^O\aOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0O\E'cnc-r8`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0Og*ZtO8g>ne^O\aOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0O\E'cnc-r8`W%&?WMfo^OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0Og*ZtO8g>ne^O\aOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0O\E'cnc-r8
`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*ZtO8g>ne^O\aOTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0O\E'cnc-r8`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*ZtO8g>ne^O\aOTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0O\E'cnc-r8`W%&?WMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*ZtO8g>n
e^O\aOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0O\E'cnc-r8q#;ejlg'ncdV-A.?b3gU]"27[\mN%[?b3gU
]"27[\mN%[?b3gU]"3.*`;'?T32rhYP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP**!)h>@4`c0FP#]"27[
\mN%[?b3gU]"27[\mN%[?b3gU]"27[\mN%[?b3gU]"27[\mN%[?b3gU]"27[\mN%[?b3gU]"27[\mN%[
?b3gU]"27[\mN%[?b3gU]"27[\mN%[?b3i%n*g/R+J%'4"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sd?
ZEa3)#&V/k?b3gU-+^Zp]"27[\mN%[?b3gU]"27[\mN%[?b3gU]"2Xk^73X$f^A2#s8N$OoD8;s^:aW3
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OXm6&q#;HrWMfo^OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0Og*Ztqu:63h;&0rOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP**WCjno'#S^l3lP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*&GDZ2">')4[/uP*#hsP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScMPEL")_Y3m(qu?Zq01iCP"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*%8jU\Oj332rhYP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP**!)h>@4`Yhe+;P*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-Se`jlQC>+J%'4"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sd?ZEa3)"rWr#"-ScK
/!?"sP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*&SIZhsbXS^l3lP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc//#8s8rua;#Vur3F"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/Yhe.4s(/Fjh#ih&"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Oi$5Aqu7e0e^O\aOTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0O\E'cq#:O9S=9VDOTR5!OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-Se9eC4Es1.ngU"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OXm6&q#;HrWMfo^OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0Og*Ztqu:63h;&0rOTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP**WCjno'#S^l3lP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*&GDZ2">')4[/uP*#i!
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/6ERBhs"Y@ZRKJ_8"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*%8jU\Oj332rhYP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP**!)h>@4`Yhe+;P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Se`jlQC>+J%'4"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-Sd?ZEa3)"rWr#"-ScK0p7Y$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OUd_DrVldO"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/-D@..ruaJ*WrnNI"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/[GTm=s(/7cgB3V$"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OhKf8qu7e5f@L+fOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0O\rKlq#:O4R[F8@
OTR>$OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*,G7q_\J=OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#s5PP>"Qqu7dP^:aW3OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0Ol>m%qu:5[b/jaKOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*)$WdJNqdc0FNq
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*(.4`r#cBl1XfQP*#j0OTR>$OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*,G7q_\J=OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0Oj!"Rqu7\8g"?IjOTUc/"-ScKP*#j0OTUc/"-ScKP*%#`T_SOu;mit7P*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-SdX]tF7B+Su'8(7U`pP*#j0OTUc/"-ScKP*#j0OTUc/"-SeY
io9k8$+SsP"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>
qti5QP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*)9aeG0%^7^&rs
P*#j0OTUc/"-ScKP*#j0OTUc/]].rGs(*CIT*(7="-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OZ'/9
q#;84g=cXlOTUc/"-ScKP*#j0OTUc/"-SdK\$u/4$&?^I"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>qti>TP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*%JrV>L5iqu7K!p\.XpZicJR"-ScKP*#j0OVF7PVqKbus(e[ig&mM#"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"I#"bjlH4:(RW\"%[WI`P*#j0OTUc/"-SdS]=RS0q>:1#
oD8;+T:Q.JOTUc/"#5t$"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OnJVK
3!5>+"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Se$bKBMX%`IMl
NR#dl`5JP+f]r2(q#>@&q"PbtRfeh9"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScqUS@P]
r:p:%jRi&<f@P,^_i`<lbN\9arsWe]^]Ta^"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-Sf>qtiGWP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OU@A=cg0lVs)e2<r`Zh@"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/El,]Orsu^#i<>F."-ScKP*#j0OTR>$OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*,G7q`Y+FOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScSQBdQXcftIXg[O\mWi6)`OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/9<kbao^qMM(&Rt.I)j52P`l34OTUc/"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>qtikcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*&,7Xf0q+g@+M-s*sV9q7l"NK#u+EQ^.`:OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-O1W"-Sc]R[K/\c,Ji-pA=adruV.<
rm^?&U"7dQW2B`\OTUc/"-ScKP*#j0OTUc/"#5t$"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OnJVKIfkjr"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OV*tJ-_d:;PEH$2OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP(/SrP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTq&6.&*CFQ^.`:OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTR>$OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*,G7qgS^2OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-S.r"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>qtkjFP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUbrOTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK0p7Y$
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/p&"W9"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0IushrOTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"#5t$"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OnJVKIfkjr"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP(/SrP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTR>$OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*,G7qgS^2OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-S.r"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#i$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-Sf>qtkjFP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUbrOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScK0p7Y$P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
p&"W9"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0IushrOTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"#5t$"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OnJVKIfkjr"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*$'9PREeB$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iD
Pm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQ@G/-QB_iD
Pm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC
$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm`nC$^R%cQB_iDPm]=4Pm`nC
$^R%cQB_fBPlm23"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*,G7q]H!(OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OZKMA_WBm1s.]Pbs!,DBjZKTD"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>qthB9P*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP**WCjamH(s7$%2c0FNqP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*,G7
q\fR"OTUc/"-ScKP*#j0OTUc/"-ScKP*#s5PC`b(s6]h,':G3iP*#j0OTUc/"-ScKP*#j0OTUc/"-Sf>
qth96P*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH&!V*>=j."-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
p&"V)"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/#F(F's.',VruDc@QiiM6"-ScKP*#j0OTUc/"-ScKP*#j0
OnJVK)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?mJe1?R@")>OTUc/"-ScKP*#j0OTUc/"-ScK
P*,G7q\fR"OTUc/"-ScKP*#j0OTUc/"-ScKP*$!6PC`b(s6]h,':G3iP*#j0OTUc/"-ScKP*#j0OTUc/
"-Sf>qth96P*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH&!V*>=j."-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/p&"V)"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/#F(F's.',VruDc@QiiM6"-ScKP*#j0OTUc/"-ScK
P*#j0OnJVK)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?lMhdmq>&G(la#C(PL.Zu_o#K_[5Ot]
(Rpldqth96P*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0
OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScK
P*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/
"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0
OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScK
P*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b
"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8
)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[u
SH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScO
P`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mc
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?
ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7
JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScKP*#j0
OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/"-ScK
P*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0OTUc/
"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScKP*#j0
OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b"-ScK
P*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci4mcP*#j0OTUc/"-ScKP*#j0OTUc/"-ScOP`p[uSH$q8)?Z.b
"-ScKP*#j0OTUc/"-ScKP*#j0OU%,7JcD8?ci5!fP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*+,Wl[f).
s3L]f"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Sd<Yd!$TnU^_7s3L^p"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#p3OtEK*0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?
0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV5,c@5GTs/UbAR?0;YHtV5,c@UbAR?
0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV5,c@UbAR?0;YHtV51!AfYRU6s*k-6OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Q!5"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/)P!;fqYA)0ci8IsP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUb5OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/G/V>;
s3L^p#aLVVP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j07?I\8OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OU.5:g@+LNs3L^p1oI5RP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j07?I\8OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/9sV%Es3L^pD8<phP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j08<F";OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-Se.cd0c6ci8LZp@];lRKJ_8"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUb>OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#s5PITT0c2Z,irr7JZ
io(ZBRKJ_8"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUb>
OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*$BFR+Lcod/VGlqu;01p@`48^+H.V#*b;RP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/
"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUb>OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*#j0OTUc/"-ScK
P*#j0OTUc/"-ScKP*#j0OTUc/"-ScKP*%,dU$h^Ne,Rboo)F48rVZ9`qXaR[oD8=TqYKg[qXaR[oD8=T
qYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[
qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaPMqXaR[oD8=TqYKg[qXaR[oD8=TqYKg[
qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[oD8=TqYKg[qXaR[r;Q]Es3L^q
~> %APLeod
EI
Q
0.011764706 0.57254905 0.56862748 sc
q
53 30 m
48.582001 30 45 26.417999 45 22 c
45 17.582001 48.582001 14 53 14 c
57.417999 14 61 17.582001 61 22 c
61 26.417999 57.417999 30 53 30 c
h
55.292999 18.292999 m
52 21.586 l
52 26 l
54 26 l
54 22.414 l
56.707001 19.707001 l
55.292999 18.292999 l
h
W
0 0 82 82 rc
40 35 m
66 35 l
66 9 l
40 9 l
h
f
Q
0.011764706 0.57254905 0.56862748 sc
q
0 0 82 82 rc
1 0 0 -1 30 77 cm
/F1.1[ 26 0 0 -26 0 0]sf
3.7720001 25 m
(!")[ 14.456000 0.000000 ] xS
ep
end
